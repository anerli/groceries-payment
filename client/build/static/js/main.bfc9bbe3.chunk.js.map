{"version":3,"sources":["components/RoomInfo.js","components/Trips.js","components/Payments.js","components/RoomLogin.js","App.js","serviceWorker.js","index.js"],"names":["RoomInfo","Card","style","width","Body","Title","this","props","roomData","Subtitle","name","Table","marginTop","Object","keys","members","map","member","other","toFixed","Spinner","animation","Button","onClick","localStorage","removeItem","window","location","reload","React","Component","handleShowInfoModal","id","setState","showInfoModal","selectedTripId","handleCloseInfoModal","state","trips","Axios","get","params","room","getItem","password","then","resp","data","forEach","includes","push","selectedTrip","filter","trip","_id","Modal","show","onHide","Header","closeButton","moment","timestamp","format","buyer","communal","total","marginLeft","description","personals","Footer","variant","bordered","hover","size","Text","JSON","stringify","Payments","handleCloseAddPaymentModal","showAddPaymentModal","handleShowAddPaymentModal","handleAddPayment","payments","console","log","transactions","transaction","payer","receiver","amount","method","RoomLogin","handleSubmit","setItem","catch","err","handleChange","event","nam","target","val","value","padding","Form","Group","controlId","Label","Control","placeholder","onChange","type","App","Container","maxWidth","Row","Col","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bfc9bbe3.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card, Table} from 'react-bootstrap';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class RoomInfo extends React.Component{\r\n    // constructor(props){\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         roomData: null\r\n    //     }\r\n    // }\r\n\r\n    componentDidMount(){\r\n        //console.log(this.props);\r\n        //headers: {'Content-Type': 'application/json'}, \r\n        // I guess you have to use query params instead of json data in GETs with Axios\r\n        // Axios.get('/api/rooms/'+localStorage.getItem('room'), {params: {password: localStorage.getItem('password')}}).then(\r\n        //     (resp) => {\r\n        //         console.log(resp.data);\r\n        //         this.setState(\r\n        //             {\r\n        //                 roomData: resp.data\r\n        //             }\r\n        //         );\r\n        //     }\r\n        // )\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Card style={{ width: '20rem' }}>\r\n                <Card.Body>\r\n                    <Card.Title>Room Info</Card.Title>\r\n                    \r\n                    {this.props.roomData ?\r\n                    <div>\r\n                        <Card.Subtitle>{this.props.roomData.name}</Card.Subtitle>\r\n                            <Table style={{marginTop: '1rem'}}>\r\n                                <tbody>\r\n                                    {\r\n                                    Object.keys(this.props.roomData.members).map(\r\n                                        member => {\r\n                                            //console.log(member);\r\n                                            //console.log(Object.keys(this.props.roomData.members[member]));\r\n                                            return Object.keys(this.props.roomData.members[member]).map( \r\n                                                    other=>{\r\n                                                        return (\r\n                                                            <tr>\r\n                                                                <td>{member} owes {other} ${this.props.roomData.members[member][other].toFixed(2)}</td>\r\n                                                            </tr>\r\n                                                        );\r\n                                                    }\r\n                                                );\r\n                                            \r\n                                        }\r\n                                    )\r\n                                    }\r\n                                </tbody>\r\n                            </Table>\r\n                        {/* <Card.Text>{JSON.stringify(this.state.roomData)}</Card.Text> */}\r\n                        \r\n                    </div>\r\n                    :\r\n                    <Spinner animation=\"border\"/>\r\n                    }\r\n                    {/* <Button>Asd</Button> */}\r\n                    <Button \r\n                        onClick={\r\n                        () => {\r\n                            localStorage.removeItem('room');\r\n                            localStorage.removeItem('password');\r\n                            //this.setState({});\r\n                            window.location.reload();\r\n                        }\r\n                        }\r\n                        style={{\r\n                            marginTop: '0rem'\r\n                        }}\r\n                    >\r\n                    Logout\r\n                    </Button>\r\n                </Card.Body>\r\n                \r\n                \r\n            </Card>\r\n            \r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Card, Button, Table} from 'react-bootstrap';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nexport default class RoomInfo extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            trips: null,\r\n            showInfoModal: false,\r\n            selectedTripId: null // only used in conjunction with modal\r\n        }\r\n    }\r\n\r\n    handleShowInfoModal = (id) => {\r\n        this.setState({\r\n            showInfoModal: true,\r\n            selectedTripId: id\r\n        });\r\n    }\r\n\r\n    handleCloseInfoModal = () => {\r\n        this.setState({\r\n            showInfoModal: false\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        Axios.get('/api/trips', {params: {room: localStorage.getItem('room'), password: localStorage.getItem('password')}}).then(\r\n            (resp) => {\r\n                //console.log(resp.data);\r\n                this.setState(\r\n                    {\r\n                        trips: resp.data.trips\r\n                    }\r\n                );\r\n            }\r\n        )\r\n    }\r\n\r\n    render(){\r\n        // Derive list of members for columns\r\n        let members = [];\r\n        Object.keys(this.props.roomData.members).forEach(\r\n            member => {\r\n                if (!members.includes(member)){\r\n                    members.push(member);\r\n                }\r\n            }\r\n        );\r\n    \r\n        let selectedTrip = null;\r\n        if(this.state.trips && this.state.showInfoModal){\r\n            selectedTrip = this.state.trips.filter(\r\n                trip => {\r\n                    return trip._id == this.state.selectedTripId;\r\n                }\r\n            )[0];\r\n        }\r\n\r\n        //console.log('Selected trip:');\r\n        //console.log(selectedTrip);\r\n        \r\n            // TODO: Card size is a hack, is hard coded right now but should ideally be dynamically sized based on # members (or by size of inner chart)\r\n        return (\r\n            <div>\r\n                {/* Kind of a hack */}\r\n                {this.state.showInfoModal &&\r\n                <Modal show={this.state.showInfoModal} onHide={this.handleCloseInfoModal}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Trip Info</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <p><b>Date Recorded:</b> {moment(selectedTrip.timestamp).format('ll')}</p>\r\n                        <p><b>Buyer:</b> {selectedTrip.buyer}</p>\r\n                        <p><b>Total Cost of Communal Items:</b> ${selectedTrip.communal.total.toFixed(2)}</p>\r\n                        <b>Description of Communal Items:</b>\r\n                        <p style={{marginLeft:'1rem'}}>{selectedTrip.communal.description}</p>\r\n                        <h4>Individual Costs</h4>\r\n                        {Object.keys(selectedTrip.personals).map(\r\n                            (member) => {\r\n                                return (\r\n                                    <div>\r\n                                        <b>{member}</b>\r\n                                        <p style={{marginLeft:'2rem'}}><b>Cost: </b>${selectedTrip.personals[member].total.toFixed(2)}</p>\r\n                                        <b style={{marginLeft:'2rem'}}>Description:</b>\r\n                                        <p style={{marginLeft:'3rem'}}>{selectedTrip.personals[member].description}</p>\r\n                                    </div>\r\n                                );\r\n                            }\r\n                        )}\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"danger\" onClick={() => {}}>\r\n                            Delete Trip\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                }\r\n                <Card style={{}}>\r\n                    <Card.Body>\r\n                        <Card.Title>Trips</Card.Title>\r\n                        \r\n                        {this.state.trips ?\r\n                        <div>\r\n                            <Table bordered hover>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Date</th>\r\n                                        <th>Buyer</th>\r\n                                        <th>Communal</th>\r\n                                        {/* Add personal column for each thing? */}\r\n                                        {/* <th>Username</th> */}\r\n                                        {members.map(\r\n                                            member => <th>{member}</th>\r\n                                        )}\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                    this.state.trips.map(\r\n                                        trip => {\r\n                                            return (\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {moment(trip.timestamp).format('l')}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {trip.buyer}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        ${trip.communal.total.toFixed(2)}\r\n                                                    </td>\r\n                                                    {members.map(\r\n                                                        member => {\r\n                                                            if(Object.keys(trip.personals).includes(member)){\r\n                                                                return <td>${trip.personals[member].total.toFixed(2)}</td>\r\n                                                                //console.log(trip.personals[member])\r\n                                                                //return <td>1.0</td>\r\n                                                            }\r\n                                                            else{\r\n                                                                return <td>$0.00</td>\r\n                                                            }\r\n                                                        }\r\n                                                    )}\r\n                                                    <td>\r\n                                                        <Button size=\"sm\" \r\n                                                            onClick={() => {\r\n                                                                this.handleShowInfoModal(trip._id)\r\n                                                            }}\r\n                                                        >More</Button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        }\r\n                                    )\r\n                                    }\r\n                                </tbody>\r\n                            </Table>\r\n                            {/* <Table>\r\n                                <tbody>\r\n                                    {\r\n                                    Object.keys(this.state.roomData.members).map(\r\n                                        member => {\r\n                                            console.log(member);\r\n                                            console.log(Object.keys(this.state.roomData.members[member]));\r\n                                            return Object.keys(this.state.roomData.members[member]).map( \r\n                                                    other=>{\r\n                                                        return (\r\n                                                            <tr>\r\n                                                                <td>{member} owes {other} ${this.state.roomData.members[member][other].toFixed(2)}</td>\r\n                                                            </tr>\r\n                                                        );\r\n                                                    }\r\n                                                );\r\n                                            \r\n                                        }\r\n                                    )\r\n                                    }\r\n                                </tbody>\r\n                            </Table> */}\r\n                            <Card.Text>{JSON.stringify(this.state.trips)}</Card.Text>\r\n                            \r\n                        </div>\r\n                        :\r\n                        <Spinner animation=\"border\"/>\r\n                        }\r\n                    </Card.Body>\r\n                    \r\n                </Card>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Card, Table} from 'react-bootstrap';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport moment from 'moment';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nexport default class Payments extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            payments: null,\r\n            showAddPaymentModal: false\r\n        }\r\n    }\r\n\r\n    handleCloseAddPaymentModal = () => {\r\n        this.setState({showAddPaymentModal: false});\r\n    }\r\n\r\n    handleShowAddPaymentModal = () => {\r\n        this.setState({showAddPaymentModal: true});\r\n    }\r\n\r\n    handleAddPayment = () => {\r\n        // TEMP\r\n        this.setState({showAddPaymentModal: false});\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log(this.props);\r\n        Axios.get('/api/transactions', {params: {room: localStorage.getItem('room'), password: localStorage.getItem('password')}}).then(\r\n            (resp) => {\r\n                console.log('Transactions:');\r\n                console.log(resp.data);\r\n                \r\n                this.setState(\r\n                    {\r\n                        payments: resp.data.transactions\r\n                    }\r\n                );\r\n            }\r\n        )\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Modal show={this.state.showAddPaymentModal} onHide={this.handleCloseAddPaymentModal}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add New Transaction</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        Put a form here\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" onClick={this.handleAddPayment}>\r\n                            Add Transaction\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                <Card style={{width: '30rem'}}>\r\n                    <Card.Body>\r\n                        <Card.Title>Payments</Card.Title>\r\n                        \r\n                        {this.state.payments ?\r\n                        <div>\r\n                            <Table bordered hover>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Date</th>\r\n                                        <th>Payer</th>\r\n                                        <th>Receiver</th>\r\n                                        <th>Amount</th>\r\n                                        <th>Method</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                    this.state.payments.map(\r\n                                        transaction => {\r\n                                            return (\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {moment(transaction.timestamp).format('l')}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {transaction.payer}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {transaction.receiver}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        ${transaction.amount.toFixed(2)}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {transaction.method}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        }\r\n                                    )\r\n                                    }\r\n                                    {/* <tr>\r\n                                        <td>\r\n                                            \r\n                                        </td>\r\n                                        <td>\r\n                                            <DropdownButton id=\"payer\" title=\"Payer\">\r\n                                                <Dropdown.Item>Anders</Dropdown.Item>\r\n                                            </DropdownButton>\r\n                                        </td>\r\n                                        <td>\r\n                                            dropdown\r\n                                        </td>\r\n                                        <td>\r\n                                            $input\r\n                                        </td>\r\n                                        <td>\r\n                                            dropdown\r\n                                        </td>\r\n                                    </tr> */}\r\n                                </tbody>\r\n                            </Table>\r\n                            <Card.Text>{JSON.stringify(this.state.payments)}</Card.Text>\r\n                            \r\n                        </div>\r\n                        :\r\n                        <Spinner animation=\"border\"/>\r\n                        }\r\n                        {/* <Button>Asd</Button> */}\r\n                        <Button \r\n                            onClick={this.handleShowAddPaymentModal}\r\n                        >\r\n                        Add New\r\n                        </Button>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Axios from 'axios';\r\n\r\nexport default class RoomLogin extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            room: '',\r\n            password: ''\r\n        }\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        //console.log(this.state.room);\r\n        //console.log(this.state.password);\r\n\r\n        Axios.get('/api/rooms/'+this.state.room, {params: {password: this.state.password}}).then(\r\n            (resp) => {\r\n                //console.log(resp);\r\n                // this.setState(\r\n                //     {\r\n                //         roomData: resp.data\r\n                //     }\r\n                // );\r\n                localStorage.setItem('room', this.state.room);\r\n                localStorage.setItem('password', this.state.password);\r\n                //this.setState({});\r\n                window.location.reload();\r\n            }\r\n        ).catch(\r\n            err => {\r\n                console.log(err);\r\n            }\r\n        )\r\n        //\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        //console.log(event);\r\n        //console.log(event.target);\r\n        let nam = event.target.id;\r\n        //console.log(nam);\r\n        let val = event.target.value;\r\n        this.setState({[nam]: val});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div style={{padding: '8rem'}}>\r\n                <h1>Room Login</h1>\r\n                <Form>\r\n                    <Form.Group controlId=\"room\">\r\n                        <Form.Label>Room Name</Form.Label>\r\n                        <Form.Control placeholder='Room Name' onChange={this.handleChange}/>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control type=\"password\" placeholder=\"Password\" onChange={this.handleChange}/>\r\n                    </Form.Group>\r\n                    {/* type=\"submit\" */}\r\n                    <Button variant=\"primary\" onClick={this.handleSubmit}>\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport RoomInfo from './components/RoomInfo';\r\nimport Trips from './components/Trips';\r\nimport Payments from './components/Payments';\r\nimport RoomLogin from './components/RoomLogin';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Axios from 'axios';\r\n\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        roomData: null\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    if(localStorage.getItem('room') != null && localStorage.getItem('password') != null){\r\n      Axios.get('/api/rooms/'+localStorage.getItem('room'), {params: {password: localStorage.getItem('password')}}).then(\r\n        (resp) => {\r\n            console.log(resp.data);\r\n            this.setState(\r\n                {\r\n                    roomData: resp.data\r\n                }\r\n            );\r\n        }\r\n      );\r\n    }\r\n    \r\n  }\r\n  render(){\r\n    let room = localStorage.getItem('room');\r\n    let password = localStorage.getItem('password');\r\n\r\n    if (room == null || password == null){\r\n      return (\r\n        <RoomLogin/>\r\n      );\r\n    }\r\n\r\n    if (this.state.roomData == null) {\r\n      return <Spinner animation=\"border\"/>\r\n    }\r\n\r\n    return (\r\n    <div style={{padding: '2rem'}}>\r\n      <p>{JSON.stringify(this.state.roomData)}</p>\r\n      <Container style={{maxWidth: '100%'}}>\r\n        <Row>\r\n          <Col>\r\n            <RoomInfo roomData={this.state.roomData}/>\r\n          </Col>\r\n          <Col>\r\n            <Trips roomData={this.state.roomData}/>\r\n          </Col>\r\n          <Col>\r\n            <Payments roomData={this.state.roomData}/>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      \r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}