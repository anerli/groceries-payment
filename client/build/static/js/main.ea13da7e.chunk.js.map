{"version":3,"sources":["components/RoomInfo.js","components/forms/NewTripForm.js","components/Trips.js","components/forms/NewTransactionForm.js","components/Payments.js","components/RoomLogin.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["RoomInfo","Card","style","width","Body","Title","this","props","roomData","Subtitle","name","Table","marginTop","Object","keys","members","map","member","other","toFixed","Spinner","animation","Button","onClick","localStorage","removeItem","window","location","reload","React","Component","NewTransactionForm","show","onHide","useState","submitting","setSubmitting","formik","useFormik","initialValues","buyer","communal_total","communal_description","onSubmit","values","console","log","Axios","post","room","getItem","password","communal","total","description","personals","then","resp","data","Modal","Header","closeButton","handleSubmit","noValidate","for","id","value","onChange","handleChange","type","rows","cols","Footer","variant","handleShowInfoModal","setState","showInfoModal","selectedTripId","handleCloseInfoModal","handleShowAddTripModal","showAddTripModal","handleCloseAddTripModal","state","trips","get","params","forEach","includes","push","selectedTrip","filter","trip","_id","moment","timestamp","format","marginLeft","bordered","hover","size","useEffect","payer","receiver","amount","method","Payments","pullData","payments","transactions","handleCloseAddPaymentModal","showAddPaymentModal","handleShowAddPaymentModal","handleAddPayment","transaction","RoomLogin","setItem","catch","err","event","nam","target","val","handleKeyPress","charCode","padding","Form","Group","controlId","Label","Control","placeholder","onKeyPress","App","JSON","stringify","Container","maxWidth","Row","Col","Boolean","hostname","match","initState","posts","rootReducer","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ea13da7e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card, Table} from 'react-bootstrap';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class RoomInfo extends React.Component{\r\n    // constructor(props){\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         roomData: null\r\n    //     }\r\n    // }\r\n\r\n    componentDidMount(){\r\n        //console.log(this.props);\r\n        //headers: {'Content-Type': 'application/json'}, \r\n        // I guess you have to use query params instead of json data in GETs with Axios\r\n        // Axios.get('/api/rooms/'+localStorage.getItem('room'), {params: {password: localStorage.getItem('password')}}).then(\r\n        //     (resp) => {\r\n        //         console.log(resp.data);\r\n        //         this.setState(\r\n        //             {\r\n        //                 roomData: resp.data\r\n        //             }\r\n        //         );\r\n        //     }\r\n        // )\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Card style={{ width: '20rem' }}>\r\n                <Card.Body>\r\n                    <Card.Title>Room Info</Card.Title>\r\n                    \r\n                    {this.props.roomData ?\r\n                    <div>\r\n                        <Card.Subtitle>{this.props.roomData.name}</Card.Subtitle>\r\n                            <Table style={{marginTop: '1rem'}}>\r\n                                <tbody>\r\n                                    {\r\n                                    Object.keys(this.props.roomData.members).map(\r\n                                        member => {\r\n                                            //console.log(member);\r\n                                            //console.log(Object.keys(this.props.roomData.members[member]));\r\n                                            return Object.keys(this.props.roomData.members[member]).map( \r\n                                                    other=>{\r\n                                                        return (\r\n                                                            <tr>\r\n                                                                <td>{member} owes {other} ${this.props.roomData.members[member][other].toFixed(2)}</td>\r\n                                                            </tr>\r\n                                                        );\r\n                                                    }\r\n                                                );\r\n                                            \r\n                                        }\r\n                                    )\r\n                                    }\r\n                                </tbody>\r\n                            </Table>\r\n                        {/* <Card.Text>{JSON.stringify(this.state.roomData)}</Card.Text> */}\r\n                        \r\n                    </div>\r\n                    :\r\n                    <Spinner animation=\"border\"/>\r\n                    }\r\n                    {/* <Button>Asd</Button> */}\r\n                    <Button \r\n                        onClick={\r\n                        () => {\r\n                            localStorage.removeItem('room');\r\n                            localStorage.removeItem('password');\r\n                            //this.setState({});\r\n                            window.location.reload();\r\n                        }\r\n                        }\r\n                        style={{\r\n                            marginTop: '0rem'\r\n                        }}\r\n                    >\r\n                    Logout\r\n                    </Button>\r\n                </Card.Body>\r\n                \r\n                \r\n            </Card>\r\n            \r\n        );\r\n    }\r\n}","import React, {useEffect, useState} from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { useFormik } from \"formik\";\r\nimport Axios from 'axios';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default function NewTransactionForm(props){\r\n    const {show, onHide, members} = props;\r\n\r\n    const [submitting, setSubmitting] = useState(false);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            // payer: members[0],\r\n            // receiver: members[0],\r\n            // amount: 0,\r\n            // method: \"Venmo\",\r\n            buyer: members[0],\r\n            communal_total: 0,\r\n            communal_description: \"\",\r\n\r\n        },\r\n        onSubmit(values){\r\n            console.log(\"SUBMITTED FORMIK THING\");\r\n            console.log(values);\r\n\r\n            setSubmitting(true);\r\n\r\n            Axios.post('/api/trips', \r\n                {\r\n                    room: localStorage.getItem('room'),\r\n                    password: localStorage.getItem('password'),\r\n                    buyer: values.buyer,\r\n                    communal: {\r\n                        total: values.communal_total,\r\n                        description: values.communal_description\r\n                    },\r\n                    personals: {\r\n\r\n                    }\r\n                }\r\n            ).then(\r\n                (resp) => {\r\n                    console.log('Transaction POST response:');\r\n                    console.log(resp.data);\r\n                    \r\n                    setSubmitting(false);\r\n                    onHide();\r\n                }\r\n            )\r\n        }\r\n    })\r\n\r\n    if (show) return (\r\n        <Modal show={show} onHide={onHide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Add New Trip</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n\r\n\r\n                <form onSubmit={formik.handleSubmit} noValidate>\r\n                    <label for=\"buyer\">Buyer:</label>\r\n                    <br></br>\r\n                    <select id=\"buyer\" name=\"buyer\" value={formik.values.buyer} onChange={formik.handleChange}>\r\n                        {members.map(\r\n                            (member) => {\r\n                                return (\r\n                                    <option value={member}>{member}</option>\r\n                                );\r\n                            }\r\n                        )}\r\n                    </select>\r\n                    <br></br>\r\n                    <label for=\"communal_total\">Communal Total:</label>\r\n                    <br></br>\r\n                    <input type=\"number\" id=\"communal_total\" name=\"communal_total\" value={formik.values.communal_total} onChange={formik.handleChange}/>\r\n                    <br></br>\r\n                    <label for=\"communal_description\">Description of Communal Items:</label>\r\n                    <br></br>\r\n                    <textarea rows=\"6\" cols=\"60\" id=\"communal_description\" name=\"communal_description\" value={formik.values.communal_description} onChange={formik.handleChange}/>\r\n                    \r\n                </form>\r\n\r\n\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                {submitting ? <Spinner animation=\"border\"/> :\r\n                <Button variant=\"primary\" type=\"submit\" onClick={formik.handleSubmit}>\r\n                    Add Trip\r\n                </Button>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n        \r\n    );\r\n\r\n    return (<div></div>);\r\n}","import React from 'react';\r\nimport {Card, Button, Table} from 'react-bootstrap';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport NewTripForm from './forms/NewTripForm';\r\n\r\nexport default class RoomInfo extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            trips: null,\r\n            showInfoModal: false,\r\n            selectedTripId: null, // only used in conjunction with modal\r\n            showAddTripModal: false\r\n        }\r\n    }\r\n\r\n    handleShowInfoModal = (id) => {\r\n        this.setState({\r\n            showInfoModal: true,\r\n            selectedTripId: id\r\n        });\r\n    }\r\n\r\n    handleCloseInfoModal = () => {\r\n        this.setState({\r\n            showInfoModal: false\r\n        });\r\n    }\r\n\r\n    handleShowAddTripModal = () => {\r\n        this.setState({showAddTripModal: true});\r\n    }\r\n\r\n    handleCloseAddTripModal = () => {\r\n        this.setState({showAddTripModal: false});\r\n        window.location.reload();\r\n    }\r\n\r\n    componentDidMount(){\r\n        Axios.get('/api/trips', {params: {room: localStorage.getItem('room'), password: localStorage.getItem('password')}}).then(\r\n            (resp) => {\r\n                //console.log(resp.data);\r\n                this.setState(\r\n                    {\r\n                        trips: resp.data.trips\r\n                    }\r\n                );\r\n            }\r\n        )\r\n    }\r\n\r\n    render(){\r\n        // Derive list of members for columns\r\n        let members = [];\r\n        Object.keys(this.props.roomData.members).forEach(\r\n            member => {\r\n                if (!members.includes(member)){\r\n                    members.push(member);\r\n                }\r\n            }\r\n        );\r\n    \r\n        let selectedTrip = null;\r\n        if(this.state.trips && this.state.showInfoModal){\r\n            selectedTrip = this.state.trips.filter(\r\n                trip => {\r\n                    return trip._id == this.state.selectedTripId;\r\n                }\r\n            )[0];\r\n        }\r\n\r\n        //console.log('Selected trip:');\r\n        //console.log(selectedTrip);\r\n        \r\n            // TODO: Card size is a hack, is hard coded right now but should ideally be dynamically sized based on # members (or by size of inner chart)\r\n        return (\r\n            <div>\r\n                {/* Kind of a hack */}\r\n                {this.state.showInfoModal &&\r\n                <Modal show={this.state.showInfoModal} onHide={this.handleCloseInfoModal}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Trip Info</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <p><b>Date Recorded:</b> {moment(selectedTrip.timestamp).format('ll')}</p>\r\n                        <p><b>Buyer:</b> {selectedTrip.buyer}</p>\r\n                        <p><b>Total Cost of Communal Items:</b> ${selectedTrip.communal.total.toFixed(2)}</p>\r\n                        <b>Description of Communal Items:</b>\r\n                        <p style={{marginLeft:'1rem'}}>{selectedTrip.communal.description}</p>\r\n                        <h4>Individual Costs</h4>\r\n                        {Object.keys(selectedTrip.personals).map(\r\n                            (member) => {\r\n                                return (\r\n                                    <div>\r\n                                        <b>{member}</b>\r\n                                        <p style={{marginLeft:'2rem'}}><b>Cost: </b>${selectedTrip.personals[member].total.toFixed(2)}</p>\r\n                                        <b style={{marginLeft:'2rem'}}>Description:</b>\r\n                                        <p style={{marginLeft:'3rem'}}>{selectedTrip.personals[member].description}</p>\r\n                                    </div>\r\n                                );\r\n                            }\r\n                        )}\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"danger\" onClick={() => {}}>\r\n                            Delete Trip\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                }\r\n                <NewTripForm\r\n                show={this.state.showAddTripModal}\r\n                onHide={this.handleCloseAddTripModal}\r\n                members={members}\r\n                />\r\n                <Card style={{}}>\r\n                    <Card.Body>\r\n                        <Card.Title>Trips</Card.Title>\r\n                        \r\n                        {this.state.trips ?\r\n                        <div>\r\n                            <Button \r\n                                onClick={this.handleShowAddTripModal}\r\n                            >\r\n                            Add New\r\n                            </Button>\r\n                            <Table bordered hover style={{marginTop: '1em'}}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Date</th>\r\n                                        <th>Buyer</th>\r\n                                        <th>Communal</th>\r\n                                        {/* Add personal column for each thing? */}\r\n                                        {/* <th>Username</th> */}\r\n                                        {members.map(\r\n                                            member => <th>{member}</th>\r\n                                        )}\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                    this.state.trips.map(\r\n                                        trip => {\r\n                                            return (\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {moment(trip.timestamp).format('l')}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {trip.buyer}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        ${trip.communal.total.toFixed(2)}\r\n                                                    </td>\r\n                                                    {members.map(\r\n                                                        member => {\r\n                                                            if(Object.keys(trip.personals).includes(member)){\r\n                                                                return <td>${trip.personals[member].total.toFixed(2)}</td>\r\n                                                                //console.log(trip.personals[member])\r\n                                                                //return <td>1.0</td>\r\n                                                            }\r\n                                                            else{\r\n                                                                return <td>$0.00</td>\r\n                                                            }\r\n                                                        }\r\n                                                    )}\r\n                                                    <td>\r\n                                                        <Button size=\"sm\" \r\n                                                            onClick={() => {\r\n                                                                this.handleShowInfoModal(trip._id)\r\n                                                            }}\r\n                                                        >More</Button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        }\r\n                                    )\r\n                                    }\r\n                                </tbody>\r\n                            </Table>\r\n                            {/* <Table>\r\n                                <tbody>\r\n                                    {\r\n                                    Object.keys(this.state.roomData.members).map(\r\n                                        member => {\r\n                                            console.log(member);\r\n                                            console.log(Object.keys(this.state.roomData.members[member]));\r\n                                            return Object.keys(this.state.roomData.members[member]).map( \r\n                                                    other=>{\r\n                                                        return (\r\n                                                            <tr>\r\n                                                                <td>{member} owes {other} ${this.state.roomData.members[member][other].toFixed(2)}</td>\r\n                                                            </tr>\r\n                                                        );\r\n                                                    }\r\n                                                );\r\n                                            \r\n                                        }\r\n                                    )\r\n                                    }\r\n                                </tbody>\r\n                            </Table> */}\r\n                            {/* <Card.Text>{JSON.stringify(this.state.trips)}</Card.Text> */}\r\n                            \r\n                        </div>\r\n                        :\r\n                        <Spinner animation=\"border\"/>\r\n                        }\r\n                    </Card.Body>\r\n                    \r\n                </Card>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}","import React, {useEffect, useState} from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { useFormik } from \"formik\";\r\nimport Axios from 'axios';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport FormGroup from 'react-bootstrap/FormGroup';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\n//show, onHide, members\r\n\r\n// hook thing attempt\r\nexport default function NewTransactionForm(props){\r\n    const {show, onHide, members} = props;\r\n\r\n    const [submitting, setSubmitting] = useState(false);\r\n\r\n    useEffect(() => {\r\n        //console.log(\"New transaction form exists\");\r\n        //console.log(members);\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            payer: members[0],\r\n            receiver: members[0],\r\n            amount: 0,\r\n            method: \"Venmo\",\r\n        },\r\n        onSubmit(values){\r\n            console.log(\"SUBMITTED FORMIK THING\");\r\n            console.log(values);\r\n\r\n            setSubmitting(true);\r\n\r\n            Axios.post('/api/transactions', \r\n                {\r\n                    room: localStorage.getItem('room'),\r\n                    password: localStorage.getItem('password'),\r\n                    payer: values.payer,\r\n                    receiver: values.receiver,\r\n                    method: values.method,\r\n                    amount: values.amount\r\n                }\r\n            ).then(\r\n                (resp) => {\r\n                    console.log('Transaction POST response:');\r\n                    console.log(resp.data);\r\n                    \r\n                    setSubmitting(false);\r\n                    onHide();\r\n                }\r\n            )\r\n        }\r\n    })\r\n\r\n    if (show) return (\r\n        <Modal show={show} onHide={onHide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Add New Transaction</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n\r\n\r\n                <form onSubmit={formik.handleSubmit} noValidate>\r\n                    <label for=\"payer\">Payer:</label>\r\n                    <br></br>\r\n                    <select id=\"payer\" name=\"payer\" value={formik.values.payer} onChange={formik.handleChange}>\r\n                        {members.map(\r\n                            (member) => {\r\n                                return (\r\n                                    <option value={member}>{member}</option>\r\n                                );\r\n                            }\r\n                        )}\r\n                    </select>\r\n                    <br></br>\r\n                    <label for=\"amount\">Amount:</label>\r\n                    <br></br>\r\n                    <input type=\"number\" id=\"amount\" name=\"amount\" value={formik.values.amount} onChange={formik.handleChange}/>\r\n                    <br></br>\r\n                    <label for=\"receiver\">Receiver:</label>\r\n                    <br></br>\r\n                    <select id=\"receiver\" name=\"receiver\" value={formik.values.receiver} onChange={formik.handleChange}>\r\n                        {members.map(\r\n                            (member) => {\r\n                                return (\r\n                                    <option value={member}>{member}</option>\r\n                                );\r\n                            }\r\n                        )}\r\n                    </select>\r\n                    <br></br>\r\n                    <label for=\"method\">Method:</label>\r\n                    <br></br>\r\n                    <select id=\"method\" name=\"method\" value={formik.values.method} onChange={formik.handleChange}>\r\n                        <option value=\"Venmo\">Venmo</option>\r\n                        <option value=\"Cash\">Cash</option>\r\n                        <option value=\"Paypal\">Paypal</option>\r\n                    </select>\r\n                </form>\r\n\r\n\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                {submitting ? <Spinner animation=\"border\"/> :\r\n                <Button variant=\"primary\" type=\"submit\" onClick={formik.handleSubmit}>\r\n                    Add Transaction\r\n                </Button>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n\r\n    return (<div></div>);\r\n}","import React from 'react';\r\nimport {Card, Table} from 'react-bootstrap';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport moment from 'moment';\r\n//import Dropdown from 'react-bootstrap/Dropdown';\r\n//import DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Modal from 'react-bootstrap/Modal';\r\n//import Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport FormGroup from 'react-bootstrap/FormGroup';\r\nimport FormLabel from 'react-bootstrap/FormLabel'; \r\nimport {Formik, Field, Form, ErrorMessage} from 'formik';\r\nimport NewTransactionForm from './forms/NewTransactionForm';\r\n\r\nexport default class Payments extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            payments: null,\r\n            showAddPaymentModal: false\r\n        }\r\n    }\r\n\r\n    pullData = () => {\r\n        Axios.get('/api/transactions', {params: {room: localStorage.getItem('room'), password: localStorage.getItem('password')}}).then(\r\n            (resp) => {\r\n                console.log('Transactions:');\r\n                console.log(resp.data);\r\n                \r\n                this.setState(\r\n                    {\r\n                        payments: resp.data.transactions\r\n                    }\r\n                );\r\n            }\r\n        )\r\n    }\r\n\r\n    handleCloseAddPaymentModal = () => {\r\n        this.setState({showAddPaymentModal: false});\r\n        //this.pullData();\r\n        window.location.reload();\r\n        //this.props.onUpdateTransaction();\r\n    }\r\n\r\n    handleShowAddPaymentModal = () => {\r\n        this.setState({showAddPaymentModal: true});\r\n    }\r\n\r\n    handleAddPayment = () => {\r\n        // TEMP\r\n        this.setState({showAddPaymentModal: false});\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log(this.props);\r\n        this.pullData();\r\n    }\r\n\r\n    render(){\r\n        let members = [];\r\n        Object.keys(this.props.roomData.members).forEach(\r\n            member => {\r\n                if (!members.includes(member)){\r\n                    members.push(member);\r\n                }\r\n            }\r\n        );\r\n        console.log(\"MEMBERS\");\r\n        console.log(members);\r\n        return (\r\n            <div>\r\n                <NewTransactionForm\r\n                show={this.state.showAddPaymentModal}\r\n                onHide={this.handleCloseAddPaymentModal}\r\n                members={members}\r\n                />\r\n\r\n                {/* <Modal show={this.state.showAddPaymentModal} onHide={this.handleCloseAddPaymentModal}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add New Transaction</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Formik\r\n                            render={({handleChange, handleSubmit, handleBlur, values, errors, validateForm}) => (\r\n                                <Form>\r\n                                    <p>{errors.payer}</p>\r\n                                    <ErrorMessage name=\"payer\"/>\r\n                                    <Field\r\n                                        name=\"payer\"\r\n                                        render={({field, formProps}) => (\r\n                                            <FormGroup controlId=\"payer\">\r\n                                                <FormLabel>Payer</FormLabel>\r\n                                                <FormControl as=\"select\" value={field.value}>\r\n                                                    {members.map((member) => {\r\n                                                        return (<option>{member}</option>);\r\n                                                    })}\r\n                                                </FormControl>\r\n                                            </FormGroup>\r\n                                        )}\r\n                                    />\r\n                                    <Button onClick={validateForm}>Validate Form</Button>\r\n                                </Form>\r\n                            )}\r\n                            validate={(values) => {\r\n                                let errors = {};\r\n                                console.log(values);\r\n                                console.log(values.payer);\r\n                                if(values.payer == 'Anders'){\r\n                                    errors.payer = 'Anders is a dumb-dumb.';\r\n                                }\r\n                                return errors;\r\n                            }}\r\n                        />\r\n                        \r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" onClick={this.handleAddPayment}>\r\n                            Add Transaction\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal> */}\r\n                <Card style={{width: '30rem'}}>\r\n                    <Card.Body>\r\n                        <Card.Title>Payments</Card.Title>\r\n                        \r\n                        \r\n                        {this.state.payments ?\r\n                        <div>\r\n                            <Button \r\n                                onClick={this.handleShowAddPaymentModal}\r\n                            >\r\n                            Add New\r\n                            </Button>\r\n                            <Table bordered hover style={{marginTop: '1rem'}}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Date</th>\r\n                                        <th>Payer</th>\r\n                                        <th>Receiver</th>\r\n                                        <th>Amount</th>\r\n                                        <th>Method</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                    this.state.payments.map(\r\n                                        transaction => {\r\n                                            return (\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {moment(transaction.timestamp).format('l')}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {transaction.payer}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {transaction.receiver}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        ${transaction.amount.toFixed(2)}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {transaction.method}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        }\r\n                                    )\r\n                                    }\r\n                                    {/* <tr>\r\n                                        <td>\r\n                                            \r\n                                        </td>\r\n                                        <td>\r\n                                            <DropdownButton id=\"payer\" title=\"Payer\">\r\n                                                <Dropdown.Item>Anders</Dropdown.Item>\r\n                                            </DropdownButton>\r\n                                        </td>\r\n                                        <td>\r\n                                            dropdown\r\n                                        </td>\r\n                                        <td>\r\n                                            $input\r\n                                        </td>\r\n                                        <td>\r\n                                            dropdown\r\n                                        </td>\r\n                                    </tr> */}\r\n                                </tbody>\r\n                            </Table>\r\n                            {/* <Card.Text>{JSON.stringify(this.state.payments)}</Card.Text> */}\r\n                            \r\n                        </div>\r\n                        :\r\n                        <Spinner animation=\"border\"/>\r\n                        }\r\n                        {/* <Button>Asd</Button> */}\r\n                        \r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Axios from 'axios';\r\n\r\nexport default class RoomLogin extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            room: '',\r\n            password: ''\r\n        }\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        //console.log(this.state.room);\r\n        //console.log(this.state.password);\r\n\r\n        Axios.get('/api/rooms/'+this.state.room, {params: {password: this.state.password}}).then(\r\n            (resp) => {\r\n                //console.log(resp);\r\n                // this.setState(\r\n                //     {\r\n                //         roomData: resp.data\r\n                //     }\r\n                // );\r\n                localStorage.setItem('room', this.state.room);\r\n                localStorage.setItem('password', this.state.password);\r\n                //this.setState({});\r\n                window.location.reload();\r\n            }\r\n        ).catch(\r\n            err => {\r\n                console.log(err);\r\n            }\r\n        )\r\n        //\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        console.log(event);\r\n        //console.log(event.target);\r\n        let nam = event.target.id;\r\n        //console.log(nam);\r\n        let val = event.target.value;\r\n        this.setState({[nam]: val});\r\n    }\r\n\r\n    handleKeyPress = (target) => {\r\n        if (target.charCode === 13){\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div style={{padding: '8rem'}}>\r\n                <h1>Room Login</h1>\r\n                <Form>\r\n                    <Form.Group controlId=\"room\">\r\n                        <Form.Label>Room Name</Form.Label>\r\n                        <Form.Control placeholder='Room Name' onChange={this.handleChange}/>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control type=\"password\" placeholder=\"Password\" onChange={this.handleChange} onKeyPress={this.handleKeyPress}/>\r\n                    </Form.Group>\r\n                    {/* type=\"submit\" */}\r\n                    <Button variant=\"primary\" onClick={this.handleSubmit}>\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport RoomInfo from './components/RoomInfo';\r\nimport Trips from './components/Trips';\r\nimport Payments from './components/Payments';\r\nimport RoomLogin from './components/RoomLogin';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Axios from 'axios';\r\n\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        roomData: null\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    if(localStorage.getItem('room') != null && localStorage.getItem('password') != null){\r\n      Axios.get('/api/rooms/'+localStorage.getItem('room'), {params: {password: localStorage.getItem('password')}}).then(\r\n        (resp) => {\r\n            console.log(resp.data);\r\n            this.setState(\r\n                {\r\n                    roomData: resp.data\r\n                }\r\n            );\r\n        }\r\n      );\r\n    } \r\n  }\r\n\r\n  // onUpdateTransaction = () => {\r\n  //   console.log(\"Transaction updated!\");\r\n  // }\r\n\r\n  render(){\r\n    let room = localStorage.getItem('room');\r\n    let password = localStorage.getItem('password');\r\n\r\n    if (room == null || password == null){\r\n      return (\r\n        <RoomLogin/>\r\n      );\r\n    }\r\n\r\n    if (this.state.roomData == null) {\r\n      return <Spinner animation=\"border\"/>\r\n    }\r\n\r\n    return (\r\n    <div style={{padding: '2rem'}}>\r\n      <p>{JSON.stringify(this.state.roomData)}</p>\r\n      <Container style={{maxWidth: '100%'}}>\r\n        <Row>\r\n          <Col>\r\n            <RoomInfo roomData={this.state.roomData}/>\r\n          </Col>\r\n          <Col>\r\n            <Trips roomData={this.state.roomData}/>\r\n          </Col>\r\n          <Col>\r\n            <Payments roomData={this.state.roomData}/>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      \r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initState = {\r\n    posts: []\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    return state;\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// Not currently actually using redux\r\nimport {createStore} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}