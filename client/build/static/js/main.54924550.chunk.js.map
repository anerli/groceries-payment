{"version":3,"sources":["components/RoomInfo.js","components/forms/NewTripForm.js","components/Trips.js","components/forms/NewTransactionForm.js","components/Payments.js","components/RoomLogin.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["RoomInfo","Card","style","width","Body","Title","this","props","roomData","Subtitle","marginBottom","name","Button","onClick","localStorage","removeItem","window","location","reload","marginTop","Table","Object","keys","members","map","member","other","toFixed","Spinner","animation","React","Component","NewTransactionForm","show","onHide","useState","submitting","setSubmitting","formik","useFormik","initialValues","buyer","communal_total","communal_description","onSubmit","values","console","log","Axios","post","room","getItem","password","communal","total","description","personals","Anders","anders_total","anders_description","Andrew","andrew_total","andrew_description","Jason","jason_total","jason_description","Ryan","ryan_total","ryan_description","Milind","milind_total","milind_description","then","resp","data","Modal","Header","closeButton","handleSubmit","noValidate","for","id","value","onChange","handleChange","type","rows","cols","Footer","variant","handleShowInfoModal","setState","showInfoModal","selectedTripId","handleCloseInfoModal","handleShowAddTripModal","showAddTripModal","handleCloseAddTripModal","state","trips","get","params","forEach","includes","push","selectedTrip","filter","trip","_id","moment","timestamp","format","marginLeft","delete","trip_id","bordered","hover","size","useEffect","payer","receiver","amount","method","Payments","pullData","payments","transactions","handleCloseAddPaymentModal","showAddPaymentModal","handleShowAddPaymentModal","handleAddPayment","overflow","transaction","RoomLogin","setItem","catch","err","event","nam","target","val","handleKeyPress","charCode","padding","Form","Group","controlId","Label","Control","placeholder","onKeyPress","App","Container","maxWidth","Row","Col","Boolean","hostname","match","initState","posts","rootReducer","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.54924550.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card, Table} from 'react-bootstrap';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class RoomInfo extends React.Component{\r\n    // constructor(props){\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         roomData: null\r\n    //     }\r\n    // }\r\n\r\n    componentDidMount(){\r\n        //console.log(this.props);\r\n        //headers: {'Content-Type': 'application/json'}, \r\n        // I guess you have to use query params instead of json data in GETs with Axios\r\n        // Axios.get('/api/rooms/'+localStorage.getItem('room'), {params: {password: localStorage.getItem('password')}}).then(\r\n        //     (resp) => {\r\n        //         console.log(resp.data);\r\n        //         this.setState(\r\n        //             {\r\n        //                 roomData: resp.data\r\n        //             }\r\n        //         );\r\n        //     }\r\n        // )\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Card style={{ width: '20rem' }}>\r\n                <Card.Body>\r\n                    <Card.Title>Room Info</Card.Title>\r\n                    \r\n                    {this.props.roomData ?\r\n                    <div>\r\n                        <Card.Subtitle style={{marginBottom: \"1rem\"}}>{this.props.roomData.name}</Card.Subtitle>\r\n                            <Button \r\n                            onClick={\r\n                            () => {\r\n                                localStorage.removeItem('room');\r\n                                localStorage.removeItem('password');\r\n                                //this.setState({});\r\n                                window.location.reload();\r\n                            }\r\n                            }\r\n                            style={{\r\n                                marginTop: '0rem'\r\n                            }}\r\n                            >\r\n                            Logout\r\n                            </Button>\r\n                            <Table style={{marginTop: '1rem'}}>\r\n                                <tbody>\r\n                                    {\r\n                                    Object.keys(this.props.roomData.members).map(\r\n                                        member => {\r\n                                            //console.log(member);\r\n                                            //console.log(Object.keys(this.props.roomData.members[member]));\r\n                                            return Object.keys(this.props.roomData.members[member]).map( \r\n                                                    other=>{\r\n                                                        return (\r\n                                                            <tr>\r\n                                                                <td>{member} owes {other} ${this.props.roomData.members[member][other].toFixed(2)}</td>\r\n                                                            </tr>\r\n                                                        );\r\n                                                    }\r\n                                                );\r\n                                            \r\n                                        }\r\n                                    )\r\n                                    }\r\n                                </tbody>\r\n                            </Table>\r\n                        {/* <Card.Text>{JSON.stringify(this.state.roomData)}</Card.Text> */}\r\n                        \r\n                    </div>\r\n                    :\r\n                    <Spinner animation=\"border\"/>\r\n                    }\r\n                    {/* <Button>Asd</Button> */}\r\n                    \r\n                </Card.Body>\r\n                \r\n                \r\n            </Card>\r\n            \r\n        );\r\n    }\r\n}","import React, {useEffect, useState} from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { useFormik } from \"formik\";\r\nimport Axios from 'axios';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default function NewTransactionForm(props){\r\n    const {show, onHide, members} = props;\r\n\r\n    const [submitting, setSubmitting] = useState(false);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            // payer: members[0],\r\n            // receiver: members[0],\r\n            // amount: 0,\r\n            // method: \"Venmo\",\r\n            buyer: members[0],\r\n            communal_total: 0,\r\n            communal_description: \"\",\r\n\r\n        },\r\n        onSubmit(values){\r\n            console.log(\"SUBMITTED FORMIK THING\");\r\n            console.log(values);\r\n\r\n            setSubmitting(true);\r\n\r\n            // let personals = {};\r\n            // members.forEach(member => {\r\n            //     personals[member] = {\r\n            //         total: values[member].total,\r\n            //         description: values[member].description\r\n            //     }\r\n            // });\r\n\r\n            let personals = {};\r\n\r\n            \r\n\r\n            Axios.post('/api/trips', \r\n                {\r\n                    room: localStorage.getItem('room'),\r\n                    password: localStorage.getItem('password'),\r\n                    buyer: values.buyer,\r\n                    communal: {\r\n                        total: values.communal_total,\r\n                        description: values.communal_description\r\n                    },\r\n                    // TODO: Dont hardcode\r\n                    personals: {\r\n                        Anders: {\r\n                            total: values.anders_total == null ? 0 : values.anders_total,\r\n                            description: values.anders_description == null ? '' : values.anders_description\r\n                        },\r\n                        Andrew: {\r\n                            total: values.andrew_total == null ? 0 : values.andrew_total,\r\n                            description: values.andrew_description == null ? '' : values.andrew_description\r\n                        },\r\n                        Jason: {\r\n                            total: values.jason_total == null ? 0 : values.jason_total,\r\n                            description: values.jason_description == null ? '' : values.jason_description\r\n                        },\r\n                        Ryan: {\r\n                            total: values.ryan_total == null ? 0 : values.ryan_total,\r\n                            description: values.ryan_description == null ? '' : values.ryan_description\r\n                        },\r\n                        Milind: {\r\n                            total: values.milind_total == null ? 0 : values.milind_total,\r\n                            description: values.milind_description == null ? '' : values.milind_description\r\n                        },\r\n                    }\r\n                }\r\n            ).then(\r\n                (resp) => {\r\n                    console.log('Transaction POST response:');\r\n                    console.log(resp.data);\r\n                    \r\n                    setSubmitting(false);\r\n                    onHide();\r\n                }\r\n            )\r\n        }\r\n    })\r\n\r\n    if (show) return (\r\n        <Modal show={show} onHide={onHide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Add New Trip</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n\r\n\r\n                <form onSubmit={formik.handleSubmit} noValidate>\r\n                    <label for=\"buyer\">Buyer:</label>\r\n                    <br></br>\r\n                    <select id=\"buyer\" name=\"buyer\" value={formik.values.buyer} onChange={formik.handleChange}>\r\n                        {members.map(\r\n                            (member) => {\r\n                                return (\r\n                                    <option value={member}>{member}</option>\r\n                                );\r\n                            }\r\n                        )}\r\n                    </select>\r\n                    <br></br>\r\n                    <label for=\"communal_total\">Communal Total:</label>\r\n                    <br></br>\r\n                    <input type=\"number\" id=\"communal_total\" name=\"communal_total\" value={formik.values.communal_total} onChange={formik.handleChange}/>\r\n                    <br></br>\r\n                    <label for=\"communal_description\">Description of Communal Items:</label>\r\n                    <br></br>\r\n                    <textarea rows=\"6\" cols=\"60\" id=\"communal_description\" name=\"communal_description\" value={formik.values.communal_description} onChange={formik.handleChange}/>\r\n                    \r\n                    {/* {members.map(\r\n                        (member) => {\r\n                            return (\r\n                                <div>\r\n                                    <p>{member}'s Total:</p>\r\n\r\n                                    <p>Description of {member}'s Items:</p>\r\n                                </div>\r\n                            );\r\n                        }\r\n                    )} */}\r\n\r\n                     \r\n                    <label for=\"anders_total\">Anders's Total:</label>\r\n                    <br></br>\r\n                    <input type=\"number\" id=\"anders_total\" name=\"anders_total\" value={formik.values.anders_total} onChange={formik.handleChange}/>\r\n                    <br></br>\r\n                    <label for=\"anders_description\">Description of Anders's Items:</label>\r\n                    <br></br>\r\n                    <textarea rows=\"6\" cols=\"60\" id=\"anders_description\" name=\"anders_description\" value={formik.values.anders_description} onChange={formik.handleChange}/>\r\n\r\n                    <label for=\"andrew_total\">Andrew's Total:</label>\r\n                    <br></br>\r\n                    <input type=\"number\" id=\"andrew_total\" name=\"andrew_total\" value={formik.values.andrew_total} onChange={formik.handleChange}/>\r\n                    <br></br>\r\n                    <label for=\"andrew_description\">Description of Andrew's Items:</label>\r\n                    <br></br>\r\n                    <textarea rows=\"6\" cols=\"60\" id=\"andrew_description\" name=\"andrew_description\" value={formik.values.andrew_description} onChange={formik.handleChange}/>\r\n\r\n                    <label for=\"jason_total\">Jason's Total:</label>\r\n                    <br></br>\r\n                    <input type=\"number\" id=\"jason_total\" name=\"jason_total\" value={formik.values.jason_total} onChange={formik.handleChange}/>\r\n                    <br></br>\r\n                    <label for=\"jason_description\">Description of Jason's Items:</label>\r\n                    <br></br>\r\n                    <textarea rows=\"6\" cols=\"60\" id=\"jason_description\" name=\"jason_description\" value={formik.values.jason_description} onChange={formik.handleChange}/>\r\n\r\n                    <label for=\"ryan_total\">Ryan's Total:</label>\r\n                    <br></br>\r\n                    <input type=\"number\" id=\"ryan_total\" name=\"ryan_total\" value={formik.values.ryan_total} onChange={formik.handleChange}/>\r\n                    <br></br>\r\n                    <label for=\"ryan_description\">Description of Ryan's Items:</label>\r\n                    <br></br>\r\n                    <textarea rows=\"6\" cols=\"60\" id=\"ryan_description\" name=\"ryan_description\" value={formik.values.ryan_description} onChange={formik.handleChange}/>\r\n\r\n                    <label for=\"milind_total\">Milind's Total:</label>\r\n                    <br></br>\r\n                    <input type=\"number\" id=\"milind_total\" name=\"milind_total\" value={formik.values.milind_total} onChange={formik.handleChange}/>\r\n                    <br></br>\r\n                    <label for=\"milind_description\">Description of Milind's Items:</label>\r\n                    <br></br>\r\n                    <textarea rows=\"6\" cols=\"60\" id=\"milind_description\" name=\"milind_description\" value={formik.values.milind_description} onChange={formik.handleChange}/>\r\n\r\n                    \r\n\r\n                </form>\r\n\r\n\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                {submitting ? <Spinner animation=\"border\"/> :\r\n                <Button variant=\"primary\" type=\"submit\" onClick={formik.handleSubmit}>\r\n                    Add Trip\r\n                </Button>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n        \r\n    );\r\n\r\n    return (<div></div>);\r\n}","import React from 'react';\r\nimport {Card, Button, Table} from 'react-bootstrap';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Axios from 'axios';\r\nimport moment from 'moment';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport NewTripForm from './forms/NewTripForm';\r\n\r\nexport default class RoomInfo extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            trips: null,\r\n            showInfoModal: false,\r\n            selectedTripId: null, // only used in conjunction with modal\r\n            showAddTripModal: false\r\n        }\r\n    }\r\n\r\n    handleShowInfoModal = (id) => {\r\n        this.setState({\r\n            showInfoModal: true,\r\n            selectedTripId: id\r\n        });\r\n    }\r\n\r\n    handleCloseInfoModal = () => {\r\n        this.setState({\r\n            showInfoModal: false\r\n        });\r\n    }\r\n\r\n    handleShowAddTripModal = () => {\r\n        this.setState({showAddTripModal: true});\r\n    }\r\n\r\n    handleCloseAddTripModal = () => {\r\n        this.setState({showAddTripModal: false});\r\n        window.location.reload();\r\n    }\r\n\r\n    componentDidMount(){\r\n        Axios.get('/api/trips', {params: {room: localStorage.getItem('room'), password: localStorage.getItem('password')}}).then(\r\n            (resp) => {\r\n                //console.log(resp.data);\r\n                this.setState(\r\n                    {\r\n                        trips: resp.data.trips\r\n                    }\r\n                );\r\n            }\r\n        )\r\n    }\r\n\r\n    render(){\r\n        // Derive list of members for columns\r\n        let members = [];\r\n        Object.keys(this.props.roomData.members).forEach(\r\n            member => {\r\n                if (!members.includes(member)){\r\n                    members.push(member);\r\n                }\r\n            }\r\n        );\r\n    \r\n        let selectedTrip = null;\r\n        if(this.state.trips && this.state.showInfoModal){\r\n            selectedTrip = this.state.trips.filter(\r\n                trip => {\r\n                    return trip._id == this.state.selectedTripId;\r\n                }\r\n            )[0];\r\n        }\r\n\r\n        //console.log('Selected trip:');\r\n        //console.log(selectedTrip);\r\n        \r\n            // TODO: Card size is a hack, is hard coded right now but should ideally be dynamically sized based on # members (or by size of inner chart)\r\n        return (\r\n            <div>\r\n                {/* Kind of a hack */}\r\n                {this.state.showInfoModal &&\r\n                <Modal show={this.state.showInfoModal} onHide={this.handleCloseInfoModal}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Trip Info</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <p><b>Date Recorded:</b> {moment(selectedTrip.timestamp).format('ll')}</p>\r\n                        <p><b>Buyer:</b> {selectedTrip.buyer}</p>\r\n                        <p><b>Total Cost of Communal Items:</b> ${selectedTrip.communal.total.toFixed(2)}</p>\r\n                        <b>Description of Communal Items:</b>\r\n                        <p style={{marginLeft:'1rem'}}>{selectedTrip.communal.description}</p>\r\n                        <h4>Individual Costs</h4>\r\n                        {Object.keys(selectedTrip.personals).map(\r\n                            (member) => {\r\n                                return (\r\n                                    <div>\r\n                                        <b>{member}</b>\r\n                                        <p style={{marginLeft:'2rem'}}><b>Cost: </b>${selectedTrip.personals[member].total.toFixed(2)}</p>\r\n                                        <b style={{marginLeft:'2rem'}}>Description:</b>\r\n                                        <p style={{marginLeft:'3rem'}}>{selectedTrip.personals[member].description}</p>\r\n                                    </div>\r\n                                );\r\n                            }\r\n                        )}\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"danger\" onClick={() => {\r\n                            console.log(\"DELETING TRIP: \", selectedTrip._id);\r\n                            Axios.delete('/api/trips', {params:{\r\n                                room: localStorage.getItem('room'),\r\n                                password: localStorage.getItem('password'),\r\n                                trip_id: selectedTrip._id\r\n                            }}).then((resp) => {\r\n                                window.location.reload();\r\n                                //console.log(resp);\r\n                            });\r\n                        }}>\r\n                            Delete Trip\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                }\r\n                <NewTripForm\r\n                show={this.state.showAddTripModal}\r\n                onHide={this.handleCloseAddTripModal}\r\n                members={members}\r\n                />\r\n                <Card style={{}}>\r\n                    <Card.Body>\r\n                        <Card.Title>Trips</Card.Title>\r\n                        \r\n                        {this.state.trips ?\r\n                        <div>\r\n                            <Button \r\n                                onClick={this.handleShowAddTripModal}\r\n                            >\r\n                            Add New\r\n                            </Button>\r\n                            <Table bordered hover style={{marginTop: '1em'}}>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Date</th>\r\n                                        <th>Buyer</th>\r\n                                        <th>Communal</th>\r\n                                        {/* Add personal column for each thing? */}\r\n                                        {/* <th>Username</th> */}\r\n                                        {members.map(\r\n                                            member => <th>{member}</th>\r\n                                        )}\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                    this.state.trips.map(\r\n                                        trip => {\r\n                                            return (\r\n                                                <tr>\r\n                                                    <td>\r\n                                                        {moment(trip.timestamp).format('l')}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {trip.buyer}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        ${trip.communal.total.toFixed(2)}\r\n                                                    </td>\r\n                                                    {members.map(\r\n                                                        member => {\r\n                                                            if(Object.keys(trip.personals).includes(member)){\r\n                                                                return <td>${trip.personals[member].total.toFixed(2)}</td>\r\n                                                                //console.log(trip.personals[member])\r\n                                                                //return <td>1.0</td>\r\n                                                            }\r\n                                                            else{\r\n                                                                return <td>$0.00</td>\r\n                                                            }\r\n                                                        }\r\n                                                    )}\r\n                                                    <td>\r\n                                                        <Button size=\"sm\" \r\n                                                            onClick={() => {\r\n                                                                this.handleShowInfoModal(trip._id)\r\n                                                            }}\r\n                                                        >More</Button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            );\r\n                                        }\r\n                                    )\r\n                                    }\r\n                                </tbody>\r\n                            </Table>\r\n                            {/* <Table>\r\n                                <tbody>\r\n                                    {\r\n                                    Object.keys(this.state.roomData.members).map(\r\n                                        member => {\r\n                                            console.log(member);\r\n                                            console.log(Object.keys(this.state.roomData.members[member]));\r\n                                            return Object.keys(this.state.roomData.members[member]).map( \r\n                                                    other=>{\r\n                                                        return (\r\n                                                            <tr>\r\n                                                                <td>{member} owes {other} ${this.state.roomData.members[member][other].toFixed(2)}</td>\r\n                                                            </tr>\r\n                                                        );\r\n                                                    }\r\n                                                );\r\n                                            \r\n                                        }\r\n                                    )\r\n                                    }\r\n                                </tbody>\r\n                            </Table> */}\r\n                            {/* <Card.Text>{JSON.stringify(this.state.trips)}</Card.Text> */}\r\n                            \r\n                        </div>\r\n                        :\r\n                        <Spinner animation=\"border\"/>\r\n                        }\r\n                    </Card.Body>\r\n                    \r\n                </Card>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}","import React, {useEffect, useState} from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { useFormik } from \"formik\";\r\nimport Axios from 'axios';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport FormGroup from 'react-bootstrap/FormGroup';\r\nimport FormLabel from 'react-bootstrap/FormLabel';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\n//show, onHide, members\r\n\r\n// hook thing attempt\r\nexport default function NewTransactionForm(props){\r\n    const {show, onHide, members} = props;\r\n\r\n    const [submitting, setSubmitting] = useState(false);\r\n\r\n    useEffect(() => {\r\n        //console.log(\"New transaction form exists\");\r\n        //console.log(members);\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            payer: members[0],\r\n            receiver: members[0],\r\n            amount: 0,\r\n            method: \"Venmo\",\r\n        },\r\n        onSubmit(values){\r\n            console.log(\"SUBMITTED FORMIK THING\");\r\n            console.log(values);\r\n\r\n            setSubmitting(true);\r\n\r\n            Axios.post('/api/transactions', \r\n                {\r\n                    room: localStorage.getItem('room'),\r\n                    password: localStorage.getItem('password'),\r\n                    payer: values.payer,\r\n                    receiver: values.receiver,\r\n                    method: values.method,\r\n                    amount: values.amount\r\n                }\r\n            ).then(\r\n                (resp) => {\r\n                    console.log('Transaction POST response:');\r\n                    console.log(resp.data);\r\n                    \r\n                    setSubmitting(false);\r\n                    onHide();\r\n                }\r\n            )\r\n        }\r\n    })\r\n\r\n    if (show) return (\r\n        <Modal show={show} onHide={onHide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Add New Transaction</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n\r\n\r\n                <form onSubmit={formik.handleSubmit} noValidate>\r\n                    <label for=\"payer\">Payer:</label>\r\n                    <br></br>\r\n                    <select id=\"payer\" name=\"payer\" value={formik.values.payer} onChange={formik.handleChange}>\r\n                        {members.map(\r\n                            (member) => {\r\n                                return (\r\n                                    <option value={member}>{member}</option>\r\n                                );\r\n                            }\r\n                        )}\r\n                    </select>\r\n                    <br></br>\r\n                    <label for=\"amount\">Amount:</label>\r\n                    <br></br>\r\n                    <input type=\"number\" id=\"amount\" name=\"amount\" value={formik.values.amount} onChange={formik.handleChange}/>\r\n                    <br></br>\r\n                    <label for=\"receiver\">Receiver:</label>\r\n                    <br></br>\r\n                    <select id=\"receiver\" name=\"receiver\" value={formik.values.receiver} onChange={formik.handleChange}>\r\n                        {members.map(\r\n                            (member) => {\r\n                                return (\r\n                                    <option value={member}>{member}</option>\r\n                                );\r\n                            }\r\n                        )}\r\n                    </select>\r\n                    <br></br>\r\n                    <label for=\"method\">Method:</label>\r\n                    <br></br>\r\n                    <select id=\"method\" name=\"method\" value={formik.values.method} onChange={formik.handleChange}>\r\n                        <option value=\"Venmo\">Venmo</option>\r\n                        <option value=\"Cash\">Cash</option>\r\n                        <option value=\"Paypal\">Paypal</option>\r\n                    </select>\r\n                </form>\r\n\r\n\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                {submitting ? <Spinner animation=\"border\"/> :\r\n                <Button variant=\"primary\" type=\"submit\" onClick={formik.handleSubmit}>\r\n                    Add Transaction\r\n                </Button>\r\n                }\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n\r\n    return (<div></div>);\r\n}","import React from 'react';\r\nimport {Card, Table} from 'react-bootstrap';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport moment from 'moment';\r\n//import Dropdown from 'react-bootstrap/Dropdown';\r\n//import DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Modal from 'react-bootstrap/Modal';\r\n//import Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport FormGroup from 'react-bootstrap/FormGroup';\r\nimport FormLabel from 'react-bootstrap/FormLabel'; \r\nimport {Formik, Field, Form, ErrorMessage} from 'formik';\r\nimport NewTransactionForm from './forms/NewTransactionForm';\r\n\r\nexport default class Payments extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            payments: null,\r\n            showAddPaymentModal: false\r\n        }\r\n    }\r\n\r\n    pullData = () => {\r\n        Axios.get('/api/transactions', {params: {room: localStorage.getItem('room'), password: localStorage.getItem('password')}}).then(\r\n            (resp) => {\r\n                console.log('Transactions:');\r\n                console.log(resp.data);\r\n                \r\n                this.setState(\r\n                    {\r\n                        payments: resp.data.transactions\r\n                    }\r\n                );\r\n            }\r\n        )\r\n    }\r\n\r\n    handleCloseAddPaymentModal = () => {\r\n        this.setState({showAddPaymentModal: false});\r\n        //this.pullData();\r\n        window.location.reload();\r\n        //this.props.onUpdateTransaction();\r\n    }\r\n\r\n    handleShowAddPaymentModal = () => {\r\n        this.setState({showAddPaymentModal: true});\r\n    }\r\n\r\n    handleAddPayment = () => {\r\n        // TEMP\r\n        this.setState({showAddPaymentModal: false});\r\n    }\r\n\r\n    componentDidMount(){\r\n        //console.log(this.props);\r\n        this.pullData();\r\n    }\r\n\r\n    render(){\r\n        let members = [];\r\n        Object.keys(this.props.roomData.members).forEach(\r\n            member => {\r\n                if (!members.includes(member)){\r\n                    members.push(member);\r\n                }\r\n            }\r\n        );\r\n        console.log(\"MEMBERS\");\r\n        console.log(members);\r\n        return (\r\n            <div>\r\n                <NewTransactionForm\r\n                show={this.state.showAddPaymentModal}\r\n                onHide={this.handleCloseAddPaymentModal}\r\n                members={members}\r\n                />\r\n\r\n                {/* <Modal show={this.state.showAddPaymentModal} onHide={this.handleCloseAddPaymentModal}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add New Transaction</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Formik\r\n                            render={({handleChange, handleSubmit, handleBlur, values, errors, validateForm}) => (\r\n                                <Form>\r\n                                    <p>{errors.payer}</p>\r\n                                    <ErrorMessage name=\"payer\"/>\r\n                                    <Field\r\n                                        name=\"payer\"\r\n                                        render={({field, formProps}) => (\r\n                                            <FormGroup controlId=\"payer\">\r\n                                                <FormLabel>Payer</FormLabel>\r\n                                                <FormControl as=\"select\" value={field.value}>\r\n                                                    {members.map((member) => {\r\n                                                        return (<option>{member}</option>);\r\n                                                    })}\r\n                                                </FormControl>\r\n                                            </FormGroup>\r\n                                        )}\r\n                                    />\r\n                                    <Button onClick={validateForm}>Validate Form</Button>\r\n                                </Form>\r\n                            )}\r\n                            validate={(values) => {\r\n                                let errors = {};\r\n                                console.log(values);\r\n                                console.log(values.payer);\r\n                                if(values.payer == 'Anders'){\r\n                                    errors.payer = 'Anders is a dumb-dumb.';\r\n                                }\r\n                                return errors;\r\n                            }}\r\n                        />\r\n                        \r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" onClick={this.handleAddPayment}>\r\n                            Add Transaction\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal> */}\r\n                <Card style={{width: '32rem'}}>\r\n                    <Card.Body>\r\n                        <Card.Title>Payments</Card.Title>\r\n                        \r\n                        \r\n                        {this.state.payments ?\r\n                        <div>\r\n                            <Button \r\n                                onClick={this.handleShowAddPaymentModal}\r\n                            >\r\n                            Add New\r\n                            </Button>\r\n                            <div style={{overflow: \"scroll\"}}>\r\n                                <Table bordered hover style={{marginTop: '1rem'}}>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Date</th>\r\n                                            <th>Payer</th>\r\n                                            <th>Receiver</th>\r\n                                            <th>Amount</th>\r\n                                            <th>Method</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {\r\n                                        this.state.payments.map(\r\n                                            transaction => {\r\n                                                return (\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            {moment(transaction.timestamp).format('l')}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {transaction.payer}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {transaction.receiver}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            ${transaction.amount.toFixed(2)}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            {transaction.method}\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                );\r\n                                            }\r\n                                        )\r\n                                        }\r\n                                        {/* <tr>\r\n                                            <td>\r\n                                                \r\n                                            </td>\r\n                                            <td>\r\n                                                <DropdownButton id=\"payer\" title=\"Payer\">\r\n                                                    <Dropdown.Item>Anders</Dropdown.Item>\r\n                                                </DropdownButton>\r\n                                            </td>\r\n                                            <td>\r\n                                                dropdown\r\n                                            </td>\r\n                                            <td>\r\n                                                $input\r\n                                            </td>\r\n                                            <td>\r\n                                                dropdown\r\n                                            </td>\r\n                                        </tr> */}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </div>\r\n                            {/* <Card.Text>{JSON.stringify(this.state.payments)}</Card.Text> */}\r\n                            \r\n                        </div>\r\n                        :\r\n                        <Spinner animation=\"border\"/>\r\n                        }\r\n                        {/* <Button>Asd</Button> */}\r\n                        \r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Axios from 'axios';\r\n\r\nexport default class RoomLogin extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            room: '',\r\n            password: ''\r\n        }\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        //console.log(this.state.room);\r\n        //console.log(this.state.password);\r\n\r\n        Axios.get('/api/rooms/'+this.state.room, {params: {password: this.state.password}}).then(\r\n            (resp) => {\r\n                //console.log(resp);\r\n                // this.setState(\r\n                //     {\r\n                //         roomData: resp.data\r\n                //     }\r\n                // );\r\n                localStorage.setItem('room', this.state.room);\r\n                localStorage.setItem('password', this.state.password);\r\n                //this.setState({});\r\n                window.location.reload();\r\n            }\r\n        ).catch(\r\n            err => {\r\n                console.log(err);\r\n            }\r\n        )\r\n        //\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        console.log(event);\r\n        //console.log(event.target);\r\n        let nam = event.target.id;\r\n        //console.log(nam);\r\n        let val = event.target.value;\r\n        this.setState({[nam]: val});\r\n    }\r\n\r\n    handleKeyPress = (target) => {\r\n        if (target.charCode === 13){\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div style={{padding: '8rem'}}>\r\n                <h1>Room Login</h1>\r\n                <Form>\r\n                    <Form.Group controlId=\"room\">\r\n                        <Form.Label>Room Name</Form.Label>\r\n                        <Form.Control placeholder='Room Name' onChange={this.handleChange}/>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"password\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control type=\"password\" placeholder=\"Password\" onChange={this.handleChange} onKeyPress={this.handleKeyPress}/>\r\n                    </Form.Group>\r\n                    {/* type=\"submit\" */}\r\n                    <Button variant=\"primary\" onClick={this.handleSubmit}>\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport RoomInfo from './components/RoomInfo';\r\nimport Trips from './components/Trips';\r\nimport Payments from './components/Payments';\r\nimport RoomLogin from './components/RoomLogin';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Axios from 'axios';\r\n\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        roomData: null\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    if(localStorage.getItem('room') != null && localStorage.getItem('password') != null){\r\n      Axios.get('/api/rooms/'+localStorage.getItem('room'), {params: {password: localStorage.getItem('password')}}).then(\r\n        (resp) => {\r\n            console.log(resp.data);\r\n            this.setState(\r\n                {\r\n                    roomData: resp.data\r\n                }\r\n            );\r\n        }\r\n      );\r\n    } \r\n  }\r\n\r\n  // onUpdateTransaction = () => {\r\n  //   console.log(\"Transaction updated!\");\r\n  // }\r\n\r\n  render(){\r\n    let room = localStorage.getItem('room');\r\n    let password = localStorage.getItem('password');\r\n\r\n    if (room == null || password == null){\r\n      return (\r\n        <RoomLogin/>\r\n      );\r\n    }\r\n\r\n    if (this.state.roomData == null) {\r\n      return <Spinner animation=\"border\"/>\r\n    }\r\n\r\n    return (\r\n    <div style={{padding: '2rem'}}>\r\n      {/* <p>{JSON.stringify(this.state.roomData)}</p> */}\r\n      <Container style={{maxWidth: '100%'}}>\r\n        <Row>\r\n          <Col>\r\n            <RoomInfo roomData={this.state.roomData}/>\r\n          </Col>\r\n          <Col>\r\n            <Trips roomData={this.state.roomData}/>\r\n          </Col>\r\n          <Col>\r\n            <Payments roomData={this.state.roomData}/>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      \r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const initState = {\r\n    posts: []\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    return state;\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// Not currently actually using redux\r\nimport {createStore} from 'redux';\r\nimport {Provider} from 'react-redux';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}